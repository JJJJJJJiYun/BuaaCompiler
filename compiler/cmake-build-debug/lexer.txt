1 CONSTSYM const
2 INTSYM int
3 ID constInt1
4 ASSIGN =
5 PLUS +
6 UNSIGNEDINT 7
7 COMMA ,
8 ID constInt2
9 ASSIGN =
10 MINUS -
11 UNSIGNEDINT 17
12 COMMA ,
13 ID constInt3
14 ASSIGN =
15 UNSIGNEDINT 10
16 SEMICOLON ;
17 CONSTSYM const
18 CHARSYM char
19 ID constChar1
20 ASSIGN =
21 QUOTE '
22 CHAR a
23 QUOTE '
24 COMMA ,
25 ID constChar2
26 ASSIGN =
27 QUOTE '
28 CHAR -
29 QUOTE '
30 COMMA ,
31 ID constChar3
32 ASSIGN =
33 QUOTE '
34 CHAR /
35 QUOTE '
36 SEMICOLON ;
37 INTSYM int
38 ID variableInt1
39 COMMA ,
40 ID variableInt2
41 COMMA ,
42 ID variableIntArray
43 LBRACK [
44 UNSIGNEDINT 10
45 RBRACK ]
46 SEMICOLON ;
47 CHARSYM char
48 ID variableChar1
49 COMMA ,
50 ID variableCharArray
51 LBRACK [
52 UNSIGNEDINT 1
53 RBRACK ]
54 SEMICOLON ;
55 INTSYM int
56 ID funcReturnInt
57 LPARENT (
58 INTSYM int
59 ID a
60 COMMA ,
61 INTSYM int
62 ID b
63 RPARENT )
64 LBRACE {
65 INTSYM int
66 ID c
67 SEMICOLON ;
68 ID c
69 ASSIGN =
70 MINUS -
71 ID a
72 PLUS +
73 ID b
74 PLUS +
75 LPARENT (
76 UNSIGNEDINT 1
77 PLUS +
78 UNSIGNEDINT 7
79 RPARENT )
80 MULTI *
81 UNSIGNEDINT 2
82 SEMICOLON ;
83 RETURNSYM return
84 LPARENT (
85 ID c
86 RPARENT )
87 SEMICOLON ;
88 RBRACE }
89 CHARSYM char
90 ID funcReturnChar
91 LPARENT (
92 CHARSYM char
93 ID c
94 RPARENT )
95 LBRACE {
96 CHARSYM char
97 ID d
98 SEMICOLON ;
99 ID d
100 ASSIGN =
101 ID c
102 SEMICOLON ;
103 RETURNSYM return
104 LPARENT (
105 ID d
106 RPARENT )
107 SEMICOLON ;
108 RBRACE }
109 VOIDSYM void
110 ID funcRelation
111 LPARENT (
112 INTSYM int
113 ID n
114 RPARENT )
115 LBRACE {
116 IFSYM if
117 LPARENT (
118 ID n
119 LESS <
120 UNSIGNEDINT 7
121 RPARENT )
122 LBRACE {
123 PRINTFSYM printf
124 LPARENT (
125 DOUQUOTE "
126 STRING <
127 DOUQUOTE "
128 RPARENT )
129 SEMICOLON ;
130 RETURNSYM return
131 SEMICOLON ;
132 RBRACE }
133 IFSYM if
134 LPARENT (
135 ID n
136 LESSEQU <=
137 UNSIGNEDINT 7
138 RPARENT )
139 LBRACE {
140 PRINTFSYM printf
141 LPARENT (
142 DOUQUOTE "
143 STRING <=
144 DOUQUOTE "
145 RPARENT )
146 SEMICOLON ;
147 RETURNSYM return
148 SEMICOLON ;
149 RBRACE }
150 IFSYM if
151 LPARENT (
152 ID n
153 EQUAL ==
154 UNSIGNEDINT 17
155 RPARENT )
156 LBRACE {
157 PRINTFSYM printf
158 LPARENT (
159 DOUQUOTE "
160 STRING ==
161 DOUQUOTE "
162 RPARENT )
163 SEMICOLON ;
164 RETURNSYM return
165 SEMICOLON ;
166 RBRACE }
167 IFSYM if
168 LPARENT (
169 ID n
170 GREATEQU >=
171 UNSIGNEDINT 77
172 RPARENT )
173 LBRACE {
174 PRINTFSYM printf
175 LPARENT (
176 DOUQUOTE "
177 STRING >=
178 DOUQUOTE "
179 RPARENT )
180 SEMICOLON ;
181 RBRACE }
182 ELSESYM else
183 LBRACE {
184 PRINTFSYM printf
185 LPARENT (
186 DOUQUOTE "
187 STRING >
188 DOUQUOTE "
189 RPARENT )
190 SEMICOLON ;
191 RBRACE }
192 RBRACE }
193 VOIDSYM void
194 ID funcPrint
195 LPARENT (
196 RPARENT )
197 LBRACE {
198 PRINTFSYM printf
199 LPARENT (
200 DOUQUOTE "
201 STRING  !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}
202 DOUQUOTE "
203 RPARENT )
204 SEMICOLON ;
205 PRINTFSYM printf
206 LPARENT (
207 ID constInt1
208 PLUS +
209 ID constInt2
210 RPARENT )
211 SEMICOLON ;
212 PRINTFSYM printf
213 LPARENT (
214 DOUQUOTE "
215 STRING %c
216 DOUQUOTE "
217 COMMA ,
218 ID constChar1
219 RPARENT )
220 SEMICOLON ;
221 RBRACE }
222 VOIDSYM void
223 ID funcDoWhileAndFor
224 LPARENT (
225 RPARENT )
226 LBRACE {
227 INTSYM int
228 ID i
229 SEMICOLON ;
230 ID i
231 ASSIGN =
232 UNSIGNEDINT 0
233 SEMICOLON ;
234 FORSYM for
235 LPARENT (
236 ID i
237 ASSIGN =
238 UNSIGNEDINT 0
239 SEMICOLON ;
240 ID i
241 LESS <
242 UNSIGNEDINT 10
243 SEMICOLON ;
244 ID i
245 ASSIGN =
246 ID i
247 PLUS +
248 UNSIGNEDINT 1
249 RPARENT )
250 ID variableIntArray
251 LBRACK [
252 ID i
253 RBRACK ]
254 ASSIGN =
255 ID i
256 SEMICOLON ;
257 DOSYM do
258 ID i
259 ASSIGN =
260 ID i
261 PLUS +
262 UNSIGNEDINT 1
263 SEMICOLON ;
264 WHILESYM while
265 LPARENT (
266 ID i
267 LESS <
268 ID constInt3
269 RPARENT )
270 PRINTFSYM printf
271 LPARENT (
272 ID variableIntArray
273 LBRACK [
274 ID i
275 RBRACK ]
276 RPARENT )
277 SEMICOLON ;
278 RBRACE }
279 INTSYM int
280 ID funcRecursion
281 LPARENT (
282 INTSYM int
283 ID n
284 RPARENT )
285 LBRACE {
286 IFSYM if
287 LPARENT (
288 ID n
289 LESSEQU <=
290 UNSIGNEDINT 0
291 RPARENT )
292 LBRACE {
293 PRINTFSYM printf
294 LPARENT (
295 DOUQUOTE "
296 STRING n cannot be smaller or equal than 0!
297 DOUQUOTE "
298 RPARENT )
299 SEMICOLON ;
300 RETURNSYM return
301 LPARENT (
302 MINUS -
303 UNSIGNEDINT 1
304 RPARENT )
305 SEMICOLON ;
306 RBRACE }
307 IFSYM if
308 LPARENT (
309 ID n
310 EQUAL ==
311 UNSIGNEDINT 1
312 RPARENT )
313 RETURNSYM return
314 LPARENT (
315 UNSIGNEDINT 1
316 RPARENT )
317 SEMICOLON ;
318 IFSYM if
319 LPARENT (
320 ID n
321 EQUAL ==
322 UNSIGNEDINT 2
323 RPARENT )
324 RETURNSYM return
325 LPARENT (
326 UNSIGNEDINT 1
327 RPARENT )
328 SEMICOLON ;
329 RETURNSYM return
330 LPARENT (
331 ID funcRecursion
332 LPARENT (
333 ID n
334 MINUS -
335 UNSIGNEDINT 1
336 RPARENT )
337 PLUS +
338 ID funcRecursion
339 LPARENT (
340 ID n
341 MINUS -
342 UNSIGNEDINT 2
343 RPARENT )
344 RPARENT )
345 SEMICOLON ;
346 RBRACE }
347 VOIDSYM void
348 MAINSYM main
349 LPARENT (
350 RPARENT )
351 LBRACE {
352 INTSYM int
353 ID tempInt
354 SEMICOLON ;
355 CHARSYM char
356 ID tempChar
357 SEMICOLON ;
358 SCANFSYM scanf
359 LPARENT (
360 ID variableInt1
361 COMMA ,
362 ID variableInt2
363 COMMA ,
364 ID variableChar1
365 RPARENT )
366 SEMICOLON ;
367 ID variableCharArray
368 LBRACK [
369 UNSIGNEDINT 0
370 RBRACK ]
371 ASSIGN =
372 QUOTE '
373 CHAR z
374 QUOTE '
375 SEMICOLON ;
376 IFSYM if
377 LPARENT (
378 ID variableInt1
379 EQUAL ==
380 ID variableInt2
381 RPARENT )
382 LBRACE {
383 ID tempInt
384 ASSIGN =
385 ID funcReturnInt
386 LPARENT (
387 ID variableInt1
388 COMMA ,
389 ID variableInt1
390 RPARENT )
391 SEMICOLON ;
392 PRINTFSYM printf
393 LPARENT (
394 ID tempInt
395 RPARENT )
396 SEMICOLON ;
397 RBRACE }
398 IFSYM if
399 LPARENT (
400 ID variableInt1
401 GREAT >
402 ID variableInt2
403 RPARENT )
404 LBRACE {
405 ID tempChar
406 ASSIGN =
407 ID funcReturnChar
408 LPARENT (
409 ID variableChar1
410 RPARENT )
411 SEMICOLON ;
412 PRINTFSYM printf
413 LPARENT (
414 ID tempChar
415 RPARENT )
416 SEMICOLON ;
417 RBRACE }
418 IFSYM if
419 LPARENT (
420 ID variableChar1
421 EQUAL ==
422 ID constChar1
423 RPARENT )
424 LBRACE {
425 ID funcRelation
426 LPARENT (
427 ID variableInt1
428 RPARENT )
429 SEMICOLON ;
430 RBRACE }
431 IFSYM if
432 LPARENT (
433 ID variableChar1
434 EQUAL ==
435 ID constChar2
436 RPARENT )
437 LBRACE {
438 ID funcPrint
439 LPARENT (
440 RPARENT )
441 SEMICOLON ;
442 RBRACE }
443 IFSYM if
444 LPARENT (
445 ID variableChar1
446 EQUAL ==
447 ID constChar3
448 RPARENT )
449 LBRACE {
450 ID funcDoWhileAndFor
451 LPARENT (
452 RPARENT )
453 SEMICOLON ;
454 RBRACE }
455 IFSYM if
456 LPARENT (
457 ID variableChar1
458 EQUAL ==
459 ID variableCharArray
460 LBRACK [
461 UNSIGNEDINT 0
462 RBRACK ]
463 RPARENT )
464 LBRACE {
465 PRINTFSYM printf
466 LPARENT (
467 ID funcRecursion
468 LPARENT (
469 ID variableInt1
470 RPARENT )
471 RPARENT )
472 SEMICOLON ;
473 RBRACE }
474 RBRACE }
