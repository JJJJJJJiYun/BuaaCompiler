1 CONSTSYM const
2 INTSYM int
3 ID constInt1
4 ASSIGN =
5 PLUS +
6 UNSIGNEDINT 7
7 COMMA ,
8 ID constInt2
9 ASSIGN =
10 MINUS -
11 UNSIGNEDINT 17
12 COMMA ,
13 ID constInt3
14 ASSIGN =
15 UNSIGNEDINT 10
16 SEMICOLON ;
17 CONSTSYM const
18 CHARSYM char
19 ID constChar1
20 ASSIGN =
21 QUOTE '
22 CHAR a
23 QUOTE '
24 COMMA ,
25 ID constChar2
26 ASSIGN =
27 QUOTE '
28 CHAR -
29 QUOTE '
30 COMMA ,
31 ID constChar3
32 ASSIGN =
33 QUOTE '
34 CHAR /
35 QUOTE '
36 SEMICOLON ;
37 INTSYM int
38 ID variableInt1
39 COMMA ,
40 ID variableInt2
41 COMMA ,
42 ID variableIntArray
43 LBRACK [
44 UNSIGNEDINT 10
45 RBRACK ]
46 SEMICOLON ;
47 CHARSYM char
48 ID variableChar1
49 COMMA ,
50 ID variableCharArray
51 LBRACK [
52 UNSIGNEDINT 1
53 RBRACK ]
54 SEMICOLON ;
55 INTSYM int
56 ID funcReturnInt
57 LPARENT (
58 INTSYM int
59 ID a
60 COMMA ,
61 INTSYM int
62 ID b
63 RPARENT )
64 LBRACE {
65 INTSYM int
66 ID c
67 SEMICOLON ;
68 ID c
69 ASSIGN =
70 MINUS -
71 ID a
72 PLUS +
73 ID b
74 PLUS +
75 UNSIGNEDINT 1
76 MULTI *
77 UNSIGNEDINT 2
78 SEMICOLON ;
79 RETURNSYM return
80 LPARENT (
81 ID c
82 RPARENT )
83 SEMICOLON ;
84 RBRACE }
85 CHARSYM char
86 ID funcReturnChar
87 LPARENT (
88 CHARSYM char
89 ID c
90 RPARENT )
91 LBRACE {
92 CHARSYM char
93 ID d
94 SEMICOLON ;
95 ID d
96 ASSIGN =
97 ID c
98 SEMICOLON ;
99 RETURNSYM return
100 LPARENT (
101 ID d
102 RPARENT )
103 SEMICOLON ;
104 RBRACE }
105 VOIDSYM void
106 ID funcRelation
107 LPARENT (
108 INTSYM int
109 ID n
110 RPARENT )
111 LBRACE {
112 IFSYM if
113 LPARENT (
114 ID n
115 LESS <
116 UNSIGNEDINT 7
117 RPARENT )
118 LBRACE {
119 PRINTFSYM printf
120 LPARENT (
121 DOUQUOTE "
122 STRING <
123 DOUQUOTE "
124 RPARENT )
125 SEMICOLON ;
126 RETURNSYM return
127 SEMICOLON ;
128 RBRACE }
129 IFSYM if
130 LPARENT (
131 ID n
132 LESSEQU <=
133 UNSIGNEDINT 7
134 RPARENT )
135 LBRACE {
136 PRINTFSYM printf
137 LPARENT (
138 DOUQUOTE "
139 STRING <=
140 DOUQUOTE "
141 RPARENT )
142 SEMICOLON ;
143 RETURNSYM return
144 SEMICOLON ;
145 RBRACE }
146 IFSYM if
147 LPARENT (
148 ID n
149 EQUAL ==
150 UNSIGNEDINT 17
151 RPARENT )
152 LBRACE {
153 PRINTFSYM printf
154 LPARENT (
155 DOUQUOTE "
156 STRING ==
157 DOUQUOTE "
158 RPARENT )
159 SEMICOLON ;
160 RETURNSYM return
161 SEMICOLON ;
162 RBRACE }
163 IFSYM if
164 LPARENT (
165 ID n
166 GREATEQU >=
167 UNSIGNEDINT 77
168 RPARENT )
169 LBRACE {
170 PRINTFSYM printf
171 LPARENT (
172 DOUQUOTE "
173 STRING >=
174 DOUQUOTE "
175 RPARENT )
176 SEMICOLON ;
177 RBRACE }
178 ELSESYM else
179 LBRACE {
180 PRINTFSYM printf
181 LPARENT (
182 DOUQUOTE "
183 STRING >
184 DOUQUOTE "
185 RPARENT )
186 SEMICOLON ;
187 RBRACE }
188 RBRACE }
189 VOIDSYM void
190 ID funcPrint
191 LPARENT (
192 RPARENT )
193 LBRACE {
194 PRINTFSYM printf
195 LPARENT (
196 DOUQUOTE "
197 STRING  !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}
198 DOUQUOTE "
199 RPARENT )
200 SEMICOLON ;
201 PRINTFSYM printf
202 LPARENT (
203 ID constInt1
204 PLUS +
205 ID constInt2
206 RPARENT )
207 SEMICOLON ;
208 PRINTFSYM printf
209 LPARENT (
210 DOUQUOTE "
211 STRING %c
212 DOUQUOTE "
213 COMMA ,
214 ID constChar1
215 RPARENT )
216 SEMICOLON ;
217 RBRACE }
218 VOIDSYM void
219 ID funcDoWhileAndFor
220 LPARENT (
221 RPARENT )
222 LBRACE {
223 INTSYM int
224 ID i
225 SEMICOLON ;
226 ID i
227 ASSIGN =
228 UNSIGNEDINT 0
229 SEMICOLON ;
230 DOSYM do
231 LBRACE {
232 ID variableIntArray
233 LBRACK [
234 ID i
235 RBRACK ]
236 ASSIGN =
237 ID i
238 SEMICOLON ;
239 ID i
240 ASSIGN =
241 ID i
242 PLUS +
243 UNSIGNEDINT 1
244 SEMICOLON ;
245 RBRACE }
246 WHILESYM while
247 LPARENT (
248 ID i
249 LESS <
250 ID constInt3
251 RPARENT )
252 SEMICOLON ;
253 FORSYM for
254 LPARENT (
255 ID i
256 ASSIGN =
257 UNSIGNEDINT 0
258 SEMICOLON ;
259 ID i
260 LESS <
261 UNSIGNEDINT 10
262 SEMICOLON ;
263 ID i
264 ASSIGN =
265 ID i
266 PLUS +
267 UNSIGNEDINT 1
268 RPARENT )
269 LBRACE {
270 PRINTFSYM printf
271 LPARENT (
272 ID variableIntArray
273 LBRACK [
274 ID i
275 RBRACK ]
276 RPARENT )
277 SEMICOLON ;
278 RBRACE }
279 RBRACE }
280 INTSYM int
281 ID funcRecursion
282 LPARENT (
283 INTSYM int
284 ID n
285 RPARENT )
286 LBRACE {
287 IFSYM if
288 LPARENT (
289 ID n
290 LESSEQU <=
291 UNSIGNEDINT 0
292 RPARENT )
293 LBRACE {
294 PRINTFSYM printf
295 LPARENT (
296 DOUQUOTE "
297 STRING n cannot be smaller or equal than 0!
298 DOUQUOTE "
299 RPARENT )
300 SEMICOLON ;
301 RETURNSYM return
302 LPARENT (
303 MINUS -
304 UNSIGNEDINT 1
305 RPARENT )
306 SEMICOLON ;
307 RBRACE }
308 IFSYM if
309 LPARENT (
310 ID n
311 EQUAL ==
312 UNSIGNEDINT 1
313 RPARENT )
314 RETURNSYM return
315 LPARENT (
316 UNSIGNEDINT 1
317 RPARENT )
318 SEMICOLON ;
319 IFSYM if
320 LPARENT (
321 ID n
322 EQUAL ==
323 UNSIGNEDINT 2
324 RPARENT )
325 RETURNSYM return
326 LPARENT (
327 UNSIGNEDINT 1
328 RPARENT )
329 SEMICOLON ;
330 RETURNSYM return
331 LPARENT (
332 ID funcRecursion
333 LPARENT (
334 ID n
335 MINUS -
336 UNSIGNEDINT 1
337 RPARENT )
338 PLUS +
339 ID funcRecursion
340 LPARENT (
341 ID n
342 MINUS -
343 UNSIGNEDINT 2
344 RPARENT )
345 RPARENT )
346 SEMICOLON ;
347 RBRACE }
348 VOIDSYM void
349 MAINSYM main
350 LPARENT (
351 RPARENT )
352 LBRACE {
353 INTSYM int
354 ID tempInt
355 SEMICOLON ;
356 CHARSYM char
357 ID tempChar
358 SEMICOLON ;
359 SCANFSYM scanf
360 LPARENT (
361 ID variableInt1
362 COMMA ,
363 ID variableInt2
364 COMMA ,
365 ID variableChar1
366 RPARENT )
367 SEMICOLON ;
368 ID variableCharArray
369 LBRACK [
370 UNSIGNEDINT 0
371 RBRACK ]
372 ASSIGN =
373 QUOTE '
374 CHAR z
375 QUOTE '
376 SEMICOLON ;
377 IFSYM if
378 LPARENT (
379 ID variableInt1
380 EQUAL ==
381 ID variableInt2
382 RPARENT )
383 LBRACE {
384 ID tempInt
385 ASSIGN =
386 ID funcReturnInt
387 LPARENT (
388 ID variableInt1
389 COMMA ,
390 ID variableInt1
391 RPARENT )
392 SEMICOLON ;
393 PRINTFSYM printf
394 LPARENT (
395 ID tempInt
396 RPARENT )
397 SEMICOLON ;
398 RBRACE }
399 IFSYM if
400 LPARENT (
401 ID variableInt1
402 GREAT >
403 ID variableInt2
404 RPARENT )
405 LBRACE {
406 ID tempChar
407 ASSIGN =
408 ID funcReturnChar
409 LPARENT (
410 ID variableChar1
411 RPARENT )
412 SEMICOLON ;
413 PRINTFSYM printf
414 LPARENT (
415 ID tempChar
416 RPARENT )
417 SEMICOLON ;
418 RBRACE }
419 IFSYM if
420 LPARENT (
421 ID variableChar1
422 EQUAL ==
423 ID constChar1
424 RPARENT )
425 LBRACE {
426 ID funcRelation
427 LPARENT (
428 ID variableInt1
429 RPARENT )
430 SEMICOLON ;
431 RBRACE }
432 IFSYM if
433 LPARENT (
434 ID variableChar1
435 EQUAL ==
436 ID constChar2
437 RPARENT )
438 LBRACE {
439 ID funcPrint
440 LPARENT (
441 RPARENT )
442 SEMICOLON ;
443 RBRACE }
444 IFSYM if
445 LPARENT (
446 ID variableChar1
447 EQUAL ==
448 ID constChar3
449 RPARENT )
450 LBRACE {
451 ID funcDoWhileAndFor
452 LPARENT (
453 RPARENT )
454 SEMICOLON ;
455 RBRACE }
456 IFSYM if
457 LPARENT (
458 ID variableChar1
459 EQUAL ==
460 ID variableCharArray
461 LBRACK [
462 UNSIGNEDINT 0
463 RBRACK ]
464 RPARENT )
465 LBRACE {
466 PRINTFSYM printf
467 LPARENT (
468 ID funcRecursion
469 LPARENT (
470 ID variableInt1
471 RPARENT )
472 RPARENT )
473 SEMICOLON ;
474 RBRACE }
475 RBRACE }
