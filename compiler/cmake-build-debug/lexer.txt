1 CONSTSYM const
2 INTSYM int
3 ID zero
4 ASSIGN =
5 UNSIGNEDINT 0
6 SEMICOLON ;
7 CONSTSYM const
8 INTSYM int
9 ID one
10 ASSIGN =
11 UNSIGNEDINT 1
12 COMMA ,
13 ID minus_two
14 ASSIGN =
15 MINUS -
16 UNSIGNEDINT 2
17 SEMICOLON ;
18 CONSTSYM const
19 CHARSYM char
20 ID renn
21 ASSIGN =
22 QUOTE '
23 CHAR 0
24 QUOTE '
25 SEMICOLON ;
26 CONSTSYM const
27 CHARSYM char
28 ID first_alpha
29 ASSIGN =
30 QUOTE '
31 CHAR a
32 QUOTE '
33 COMMA ,
34 ID first_captical
35 ASSIGN =
36 QUOTE '
37 CHAR A
38 QUOTE '
39 SEMICOLON ;
40 INTSYM int
41 ID x
42 COMMA ,
43 ID yy
44 COMMA ,
45 ID zz
46 COMMA ,
47 ID yyy
48 LBRACK [
49 UNSIGNEDINT 7
50 RBRACK ]
51 SEMICOLON ;
52 INTSYM int
53 ID fact
54 LPARENT (
55 INTSYM int
56 ID t
57 RPARENT )
58 LBRACE {
59 CONSTSYM const
60 INTSYM int
61 ID zero
62 ASSIGN =
63 UNSIGNEDINT 1
64 SEMICOLON ;
65 IFSYM if
66 LPARENT (
67 ID t
68 LESS <
69 UNSIGNEDINT 3
70 RPARENT )
71 RETURNSYM return
72 LPARENT (
73 ID t
74 RPARENT )
75 SEMICOLON ;
76 ELSESYM else
77 RETURNSYM return
78 LPARENT (
79 ID fact
80 LPARENT (
81 ID t
82 MINUS -
83 UNSIGNEDINT 1
84 RPARENT )
85 MULTI *
86 ID t
87 RPARENT )
88 SEMICOLON ;
89 RBRACE }
90 INTSYM int
91 ID rt15
92 LPARENT (
93 RPARENT )
94 LBRACE {
95 RETURNSYM return
96 LPARENT (
97 UNSIGNEDINT 3
98 MULTI *
99 UNSIGNEDINT 5
100 divide /
101 ID ONE
102 RPARENT )
103 SEMICOLON ;
104 RBRACE }
105 CHARSYM char
106 ID fun2
107 LPARENT (
108 INTSYM int
109 ID a
110 COMMA ,
111 INTSYM int
112 ID b
113 COMMA ,
114 INTSYM int
115 ID c
116 COMMA ,
117 INTSYM int
118 ID d
119 COMMA ,
120 INTSYM int
121 ID e
122 COMMA ,
123 INTSYM int
124 ID f
125 RPARENT )
126 LBRACE {
127 PRINTFSYM printf
128 LPARENT (
129 ID a
130 PLUS +
131 ID b
132 MULTI *
133 ID c
134 MULTI *
135 ID d
136 divide /
137 ID e
138 MINUS -
139 ID f
140 RPARENT )
141 SEMICOLON ;
142 RETURNSYM return
143 LPARENT (
144 QUOTE '
145 CHAR A
146 QUOTE '
147 RPARENT )
148 SEMICOLON ;
149 RBRACE }
150 VOIDSYM void
151 MAINSYM main
152 LPARENT (
153 RPARENT )
154 LBRACE {
155 CONSTSYM const
156 INTSYM int
157 ID b
158 ASSIGN =
159 PLUS +
160 UNSIGNEDINT 1
161 COMMA ,
162 ID c
163 ASSIGN =
164 UNSIGNEDINT 2
165 COMMA ,
166 ID d
167 ASSIGN =
168 UNSIGNEDINT 3
169 COMMA ,
170 ID e
171 ASSIGN =
172 UNSIGNEDINT 4
173 SEMICOLON ;
174 CHARSYM char
175 ID ar
176 LBRACK [
177 UNSIGNEDINT 2
178 RBRACK ]
179 SEMICOLON ;
180 INTSYM int
181 ID r
182 COMMA ,
183 ID m1
184 LBRACK [
185 UNSIGNEDINT 8
186 RBRACK ]
187 SEMICOLON ;
188 INTSYM int
189 ID aa
190 COMMA ,
191 ID a
192 SEMICOLON ;
193 ID x
194 ASSIGN =
195 PLUS +
196 MINUS -
197 UNSIGNEDINT 1
198 SEMICOLON ;
199 ID r
200 ASSIGN =
201 MINUS -
202 UNSIGNEDINT 4
203 SEMICOLON ;
204 ID aa
205 ASSIGN =
206 UNSIGNEDINT 6
207 SEMICOLON ;
208 PRINTFSYM printf
209 LPARENT (
210 DOUQUOTE "
211 STRING !@#$%%abcd114514ABCD963287~;: 
212 DOUQUOTE "
213 COMMA ,
214 ID fact
215 LPARENT (
216 ID AA
217 RPARENT )
218 RPARENT )
219 SEMICOLON ;
220 ID AR
221 LBRACK [
222 ID d
223 MULTI *
224 ID e
225 PLUS +
226 UNSIGNEDINT 6
227 MULTI *
228 LPARENT (
229 ID minus_two
230 PLUS +
231 ID b
232 MINUS -
233 UNSIGNEDINT 1
234 RPARENT )
235 RBRACK ]
236 ASSIGN =
237 ID fun2
238 LPARENT (
239 ID x
240 MINUS -
241 ID r
242 COMMA ,
243 ID aa
244 COMMA ,
245 ID b
246 COMMA ,
247 ID e
248 COMMA ,
249 ID c
250 COMMA ,
251 ID minus_two
252 RPARENT )
253 SEMICOLON ;
254 PRINTFSYM printf
255 LPARENT (
256 LPARENT (
257 ID ar
258 LBRACK [
259 ID ZeRo
260 divide /
261 ID fact
262 LPARENT (
263 UNSIGNEDINT 4
264 RPARENT )
265 RBRACK ]
266 RPARENT )
267 RPARENT )
268 SEMICOLON ;
269 ID ar
270 LBRACK [
271 UNSIGNEDINT 1
272 RBRACK ]
273 ASSIGN =
274 QUOTE '
275 CHAR +
276 QUOTE '
277 SEMICOLON ;
278 ID aa
279 ASSIGN =
280 MINUS -
281 ID b
282 MULTI *
283 LPARENT (
284 ID ar
285 LBRACK [
286 UNSIGNEDINT 1
287 RBRACK ]
288 PLUS +
289 UNSIGNEDINT 20
290 RPARENT )
291 PLUS +
292 LPARENT (
293 ID c
294 MINUS -
295 ID e
296 MULTI *
297 UNSIGNEDINT 9
298 RPARENT )
299 PLUS +
300 UNSIGNEDINT 2
301 MULTI *
302 QUOTE '
303 CHAR m
304 QUOTE '
305 SEMICOLON ;
306 PRINTFSYM printf
307 LPARENT (
308 ID aa
309 RPARENT )
310 SEMICOLON ;
311 ID a
312 ASSIGN =
313 ID aa
314 SEMICOLON ;
315 SCANFSYM scanf
316 LPARENT (
317 ID a
318 COMMA ,
319 ID x
320 RPARENT )
321 SEMICOLON ;
322 IFSYM if
323 LPARENT (
324 ID a
325 GREAT >
326 UNSIGNEDINT 0
327 RPARENT )
328 LBRACE {
329 PRINTFSYM printf
330 LPARENT (
331 DOUQUOTE "
332 STRING 1 hit 
333 DOUQUOTE "
334 RPARENT )
335 SEMICOLON ;
336 IFSYM if
337 LPARENT (
338 ID x
339 LESSEQU <=
340 UNSIGNEDINT 0
341 RPARENT )
342 LBRACE {
343 ID r
344 ASSIGN =
345 ID a
346 divide /
347 ID x
348 MULTI *
349 ID a
350 SEMICOLON ;
351 PRINTFSYM printf
352 LPARENT (
353 DOUQUOTE "
354 STRING 2 hit 
355 DOUQUOTE "
356 RPARENT )
357 SEMICOLON ;
358 RBRACE }
359 ID r
360 ASSIGN =
361 ID r
362 PLUS +
363 ID aa
364 SEMICOLON ;
365 RBRACE }
366 IFSYM if
367 LPARENT (
368 ID x
369 NEQUAL !=
370 UNSIGNEDINT 0
371 RPARENT )
372 LBRACE {
373 PRINTFSYM printf
374 LPARENT (
375 DOUQUOTE "
376 STRING 3 hit 
377 DOUQUOTE "
378 RPARENT )
379 SEMICOLON ;
380 IFSYM if
381 LPARENT (
382 ID a
383 EQUAL ==
384 MINUS -
385 UNSIGNEDINT 4
386 RPARENT )
387 LBRACE {
388 ID r
389 ASSIGN =
390 ID r
391 PLUS +
392 UNSIGNEDINT 1
393 SEMICOLON ;
394 PRINTFSYM printf
395 LPARENT (
396 DOUQUOTE "
397 STRING 4 hit 
398 DOUQUOTE "
399 RPARENT )
400 SEMICOLON ;
401 RBRACE }
402 RBRACE }
403 IFSYM if
404 LPARENT (
405 ID a
406 LESS <
407 UNSIGNEDINT 0
408 RPARENT )
409 LBRACE {
410 PRINTFSYM printf
411 LPARENT (
412 DOUQUOTE "
413 STRING 5 hit 
414 DOUQUOTE "
415 RPARENT )
416 SEMICOLON ;
417 IFSYM if
418 LPARENT (
419 ID x
420 GREATEQU >=
421 UNSIGNEDINT 0
422 RPARENT )
423 LBRACE {
424 ID r
425 ASSIGN =
426 ID r
427 PLUS +
428 ID a
429 SEMICOLON ;
430 PRINTFSYM printf
431 LPARENT (
432 DOUQUOTE "
433 STRING 6 hit 
434 DOUQUOTE "
435 RPARENT )
436 SEMICOLON ;
437 RBRACE }
438 RBRACE }
439 ELSESYM else
440 LBRACE {
441 ID r
442 ASSIGN =
443 ID r
444 MULTI *
445 MINUS -
446 UNSIGNEDINT 1
447 SEMICOLON ;
448 PRINTFSYM printf
449 LPARENT (
450 ID r
451 RPARENT )
452 SEMICOLON ;
453 RBRACE }
454 FORSYM for
455 LPARENT (
456 ID a
457 ASSIGN =
458 MINUS -
459 UNSIGNEDINT 2
460 SEMICOLON ;
461 ID a
462 LESS <
463 ID d
464 SEMICOLON ;
465 ID a
466 ASSIGN =
467 ID a
468 PLUS +
469 UNSIGNEDINT 1
470 RPARENT )
471 LBRACE {
472 ID x
473 ASSIGN =
474 ID x
475 PLUS +
476 ID e
477 SEMICOLON ;
478 RBRACE }
479 DOSYM do
480 LBRACE {
481 ID x
482 ASSIGN =
483 ID x
484 MINUS -
485 ID c
486 SEMICOLON ;
487 RBRACE }
488 WHILESYM while
489 LPARENT (
490 ID x
491 GREAT >
492 UNSIGNEDINT 0
493 RPARENT )
494 SEMICOLON ;
495 PRINTFSYM printf
496 LPARENT (
497 ID x
498 RPARENT )
499 SEMICOLON ;
500 RBRACE }
